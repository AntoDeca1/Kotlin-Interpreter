
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALleftLOGICAL_ORleftLOGICAL_ANDnonassocLOGICAL_EQUALNOT_EQUALnonassocLESS_THANGREATER_THANLESS_THAN_EQUALGREATER_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDErightLOGICAL_NOTUMINUSBOOLEAN COLONS COMMA DIVIDE ELSE EMPTY EQUAL FALSE FUN GREATER_THAN GREATER_THAN_EQUAL ID IF INT INTEGER_LITERAL LBRACE LESS_THAN LESS_THAN_EQUAL LOGICAL_AND LOGICAL_EQUAL LOGICAL_NOT LOGICAL_OR LPAREN MINUS NEWLINE NOT_EQUAL PLUS PRINT RBRACE READLINE RPAREN STRING STRING_LITERAL TIMES TRUE VAL VAR WHILE WHITEprogram : statement_listexpression : MINUS expression %prec UMINUSstatement_list : statement\n                     | statement_list statementstatement : variable_declaration\n                 | function_declaration\n                 | if_statement\n                 | while_statement\n                 | output_statementvariable_declaration : VAL ID COLONS type EQUAL expression\n                            | VAR ID COLONS type EQUAL expression\n                            | VAL ID EQUAL expression\n                            | VAR ID EQUAL expression type : INT\n             | STRING\n             | BOOLEANexpression : term\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LOGICAL_AND expression\n                  | expression LOGICAL_OR expression\n                  | expression LOGICAL_EQUAL expression\n                  | LOGICAL_NOT expression\n                  | expression GREATER_THAN expression\n                  | expression LESS_THAN expression\n                  | expression NOT_EQUAL expression\n                  | expression GREATER_THAN_EQUAL expression\n                  | expression LESS_THAN_EQUAL expression\n                  | LPAREN expression RPAREN term : Literal\n            | IDLiteral : INTEGER_LITERAL\n               | boolean\n               | STRING_LITERALboolean : TRUE\n               | FALSEsync : NEWLINEfunction_declaration : FUN ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACEparameter_list : parameter\n                     | parameter_list COMMA parameter parameter : ID COLONS typeif_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                    | IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEoutput_statement : PRINT LPAREN expression RPAREN'
    
_lr_action_items = {'VAL':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[9,9,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,9,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,9,-10,-11,9,9,9,9,-44,-46,-40,9,9,-45,]),'VAR':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[10,10,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,10,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,10,-10,-11,10,10,10,10,-44,-46,-40,10,10,-45,]),'FUN':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[11,11,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,11,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,11,-10,-11,11,11,11,11,-44,-46,-40,11,11,-45,]),'IF':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[12,12,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,12,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,12,-10,-11,12,12,12,12,-44,-46,-40,12,12,-45,]),'WHILE':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[13,13,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,13,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,13,-10,-11,13,13,13,13,-44,-46,-40,13,13,-45,]),'PRINT':([0,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,94,95,96,97,98,99,101,102,103,],[14,14,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,14,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,14,-10,-11,14,14,14,14,-44,-46,-40,14,14,-45,]),'$end':([1,2,3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,97,98,99,103,],[0,-1,-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,-10,-11,-44,-46,-40,-45,]),'RBRACE':([3,4,5,6,7,8,15,30,32,33,34,35,36,37,38,45,47,65,66,68,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,94,95,96,97,98,99,102,103,],[-3,-5,-6,-7,-8,-9,-4,-17,-32,-33,-34,-35,-36,-37,-38,-12,-13,-2,-25,-47,-31,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,-10,-11,97,98,99,-44,-46,-40,103,-45,]),'ID':([9,10,11,19,20,21,23,25,26,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,73,],[16,17,18,33,33,33,33,33,48,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,48,]),'LPAREN':([12,13,14,18,19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[19,20,21,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'COLONS':([16,17,48,],[22,24,71,]),'EQUAL':([16,17,41,42,43,44,46,],[23,25,69,-14,-15,-16,70,]),'MINUS':([19,20,21,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,47,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[29,29,29,29,29,29,54,29,-17,29,-32,-33,-34,-35,-36,-37,-38,54,54,54,54,54,29,29,29,29,29,29,29,29,29,29,29,29,-2,-25,29,29,-31,-18,-19,-20,-21,54,54,54,54,54,54,54,54,54,54,]),'LOGICAL_NOT':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'INTEGER_LITERAL':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING_LITERAL':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'TRUE':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'INT':([22,24,71,],[42,42,42,]),'STRING':([22,24,71,],[43,43,43,]),'BOOLEAN':([22,24,71,],[44,44,44,]),'RPAREN':([28,30,32,33,34,35,36,37,38,39,40,42,43,44,49,50,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,91,93,],[52,-17,-32,-33,-34,-35,-36,-37,-38,67,68,-14,-15,-16,72,-41,74,-2,-25,-31,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,-43,-42,]),'PLUS':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[53,-17,-32,-33,-34,-35,-36,-37,-38,53,53,53,53,53,-2,-25,-31,-18,-19,-20,-21,53,53,53,53,53,53,53,53,53,53,]),'TIMES':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[55,-17,-32,-33,-34,-35,-36,-37,-38,55,55,55,55,55,-2,-25,-31,55,55,-20,-21,55,55,55,55,55,55,55,55,55,55,]),'DIVIDE':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[56,-17,-32,-33,-34,-35,-36,-37,-38,56,56,56,56,56,-2,-25,-31,56,56,-20,-21,56,56,56,56,56,56,56,56,56,56,]),'LOGICAL_AND':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[57,-17,-32,-33,-34,-35,-36,-37,-38,57,57,57,57,57,-2,-25,-31,-18,-19,-20,-21,-22,57,-24,-26,-27,-28,-29,-30,57,57,]),'LOGICAL_OR':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[58,-17,-32,-33,-34,-35,-36,-37,-38,58,58,58,58,58,-2,-25,-31,-18,-19,-20,-21,-22,-23,-24,-26,-27,-28,-29,-30,58,58,]),'LOGICAL_EQUAL':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[59,-17,-32,-33,-34,-35,-36,-37,-38,59,59,59,59,59,-2,-25,-31,-18,-19,-20,-21,59,59,None,-26,-27,None,-29,-30,59,59,]),'GREATER_THAN':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[60,-17,-32,-33,-34,-35,-36,-37,-38,60,60,60,60,60,-2,-25,-31,-18,-19,-20,-21,60,60,60,None,None,60,None,None,60,60,]),'LESS_THAN':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[61,-17,-32,-33,-34,-35,-36,-37,-38,61,61,61,61,61,-2,-25,-31,-18,-19,-20,-21,61,61,61,None,None,61,None,None,61,61,]),'NOT_EQUAL':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[62,-17,-32,-33,-34,-35,-36,-37,-38,62,62,62,62,62,-2,-25,-31,-18,-19,-20,-21,62,62,None,-26,-27,None,-29,-30,62,62,]),'GREATER_THAN_EQUAL':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[63,-17,-32,-33,-34,-35,-36,-37,-38,63,63,63,63,63,-2,-25,-31,-18,-19,-20,-21,63,63,63,None,None,63,None,None,63,63,]),'LESS_THAN_EQUAL':([28,30,32,33,34,35,36,37,38,39,40,45,47,51,65,66,74,76,77,78,79,80,81,82,83,84,85,86,87,89,90,],[64,-17,-32,-33,-34,-35,-36,-37,-38,64,64,64,64,64,-2,-25,-31,-18,-19,-20,-21,64,64,64,None,None,64,None,None,64,64,]),'COMMA':([42,43,44,49,50,91,93,],[-14,-15,-16,73,-41,-43,-42,]),'LBRACE':([52,67,72,100,],[75,88,92,101,]),'ELSE':([97,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,75,88,92,101,],[2,94,95,96,102,]),'statement':([0,2,75,88,92,94,95,96,101,102,],[3,15,3,3,3,15,15,15,3,15,]),'variable_declaration':([0,2,75,88,92,94,95,96,101,102,],[4,4,4,4,4,4,4,4,4,4,]),'function_declaration':([0,2,75,88,92,94,95,96,101,102,],[5,5,5,5,5,5,5,5,5,5,]),'if_statement':([0,2,75,88,92,94,95,96,101,102,],[6,6,6,6,6,6,6,6,6,6,]),'while_statement':([0,2,75,88,92,94,95,96,101,102,],[7,7,7,7,7,7,7,7,7,7,]),'output_statement':([0,2,75,88,92,94,95,96,101,102,],[8,8,8,8,8,8,8,8,8,8,]),'expression':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[28,39,40,45,47,51,65,66,76,77,78,79,80,81,82,83,84,85,86,87,89,90,]),'term':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'Literal':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'boolean':([19,20,21,23,25,27,29,31,53,54,55,56,57,58,59,60,61,62,63,64,69,70,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'type':([22,24,71,],[41,46,91,]),'parameter_list':([26,],[49,]),'parameter':([26,73,],[50,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parserv2.py',19),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','parserv2.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parserv2.py',29),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parserv2.py',30),
  ('statement -> variable_declaration','statement',1,'p_statement','parserv2.py',38),
  ('statement -> function_declaration','statement',1,'p_statement','parserv2.py',39),
  ('statement -> if_statement','statement',1,'p_statement','parserv2.py',40),
  ('statement -> while_statement','statement',1,'p_statement','parserv2.py',41),
  ('statement -> output_statement','statement',1,'p_statement','parserv2.py',42),
  ('variable_declaration -> VAL ID COLONS type EQUAL expression','variable_declaration',6,'p_variable_declaration','parserv2.py',47),
  ('variable_declaration -> VAR ID COLONS type EQUAL expression','variable_declaration',6,'p_variable_declaration','parserv2.py',48),
  ('variable_declaration -> VAL ID EQUAL expression','variable_declaration',4,'p_variable_declaration','parserv2.py',49),
  ('variable_declaration -> VAR ID EQUAL expression','variable_declaration',4,'p_variable_declaration','parserv2.py',50),
  ('type -> INT','type',1,'p_type','parserv2.py',58),
  ('type -> STRING','type',1,'p_type','parserv2.py',59),
  ('type -> BOOLEAN','type',1,'p_type','parserv2.py',60),
  ('expression -> term','expression',1,'p_expression','parserv2.py',65),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parserv2.py',66),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parserv2.py',67),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parserv2.py',68),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parserv2.py',69),
  ('expression -> expression LOGICAL_AND expression','expression',3,'p_expression','parserv2.py',70),
  ('expression -> expression LOGICAL_OR expression','expression',3,'p_expression','parserv2.py',71),
  ('expression -> expression LOGICAL_EQUAL expression','expression',3,'p_expression','parserv2.py',72),
  ('expression -> LOGICAL_NOT expression','expression',2,'p_expression','parserv2.py',73),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','parserv2.py',74),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','parserv2.py',75),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','parserv2.py',76),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','parserv2.py',77),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','parserv2.py',78),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parserv2.py',79),
  ('term -> Literal','term',1,'p_term','parserv2.py',84),
  ('term -> ID','term',1,'p_term','parserv2.py',85),
  ('Literal -> INTEGER_LITERAL','Literal',1,'p_literal','parserv2.py',90),
  ('Literal -> boolean','Literal',1,'p_literal','parserv2.py',91),
  ('Literal -> STRING_LITERAL','Literal',1,'p_literal','parserv2.py',92),
  ('boolean -> TRUE','boolean',1,'p_boolean','parserv2.py',165),
  ('boolean -> FALSE','boolean',1,'p_boolean','parserv2.py',166),
  ('sync -> NEWLINE','sync',1,'p_sync','parserv2.py',174),
  ('function_declaration -> FUN ID LPAREN parameter_list RPAREN LBRACE statement_list RBRACE','function_declaration',8,'p_function_declaration','parserv2.py',181),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parserv2.py',186),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','parserv2.py',187),
  ('parameter -> ID COLONS type','parameter',3,'p_parameter','parserv2.py',195),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','parserv2.py',201),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE ELSE LBRACE statement_list RBRACE','if_statement',11,'p_if_statement','parserv2.py',202),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','while_statement',7,'p_while_statement','parserv2.py',208),
  ('output_statement -> PRINT LPAREN expression RPAREN','output_statement',4,'p_output_statement','parserv2.py',220),
]
