Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     expression -> MINUS expression
Rule 3     program -> declarations
Rule 4     statement_list -> statement
Rule 5     statement_list -> statement_list statement
Rule 6     declarations -> declaration
Rule 7     declarations -> declarations declaration
Rule 8     declaration -> variable_declaration semis
Rule 9     declaration -> function_declaration semis
Rule 10    statement -> declaration
Rule 11    statement -> function_calling semis
Rule 12    statement -> if_statement semis
Rule 13    statement -> while_statement semis
Rule 14    statement -> for_statement semis
Rule 15    statement -> assignment semis
Rule 16    statement -> return_statement semis
Rule 17    statement -> print_statement semis
Rule 18    block -> LBRACE RBRACE
Rule 19    block -> LBRACE statement_list RBRACE
Rule 20    return_statement -> RETURN expression
Rule 21    assignment -> ID EQUAL expression
Rule 22    function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block
Rule 23    function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block
Rule 24    function_declaration -> FUN ID LPAREN RPAREN COLONS type block
Rule 25    function_declaration -> FUN ID LPAREN RPAREN block
Rule 26    function_calling -> ID LPAREN parameter_list_calling RPAREN
Rule 27    function_calling -> ID LPAREN RPAREN
Rule 28    parameter_list_calling -> parameter_calling
Rule 29    parameter_list_calling -> parameter_list_calling COMMA parameter_calling
Rule 30    parameter_list_declaration -> parameter_declaration
Rule 31    parameter_list_declaration -> parameter_list_declaration COMMA parameter_declaration
Rule 32    expression -> term
Rule 33    expression -> expression PLUS expression
Rule 34    expression -> expression MINUS expression
Rule 35    expression -> expression TIMES expression
Rule 36    expression -> expression DIVIDE expression
Rule 37    expression -> expression LOGICAL_AND expression
Rule 38    expression -> expression LOGICAL_OR expression
Rule 39    expression -> expression LOGICAL_EQUAL expression
Rule 40    expression -> LOGICAL_NOT expression
Rule 41    expression -> expression GREATER_THAN expression
Rule 42    expression -> expression LESS_THAN expression
Rule 43    expression -> expression NOT_EQUAL expression
Rule 44    expression -> expression GREATER_THAN_EQUAL expression
Rule 45    expression -> expression LESS_THAN_EQUAL expression
Rule 46    expression -> LPAREN expression RPAREN
Rule 47    parameter_calling -> term
Rule 48    parameter_declaration -> ID COLONS type
Rule 49    if_statement -> IF LPAREN expression RPAREN block
Rule 50    if_statement -> IF LPAREN expression RPAREN block ELSE block
Rule 51    while_statement -> WHILE LPAREN expression RPAREN block
Rule 52    for_statement -> FOR LPAREN range_operator RPAREN block
Rule 53    range_operator -> ID IN term RANGE term
Rule 54    range_operator -> ID IN term RANGE term STEP term
Rule 55    variable_declaration -> VAL ID COLONS type EQUAL expression
Rule 56    variable_declaration -> VAR ID COLONS type EQUAL expression
Rule 57    variable_declaration -> VAL ID EQUAL expression
Rule 58    variable_declaration -> VAR ID EQUAL expression
Rule 59    type -> INT
Rule 60    type -> STRING
Rule 61    type -> BOOLEAN
Rule 62    print_statement -> PRINT LPAREN expression RPAREN
Rule 63    term -> Literal
Rule 64    term -> ID
Rule 65    term -> function_calling
Rule 66    term -> readline
Rule 67    Literal -> INTEGER_LITERAL
Rule 68    Literal -> TRUE
Rule 69    Literal -> FALSE
Rule 70    Literal -> STRING_LITERAL
Rule 71    semis -> SEMICOLON
Rule 72    semis -> empty
Rule 73    readline -> READLINE LPAREN RPAREN

Terminals, with rules where they appear

BOOLEAN              : 61
COLONS               : 22 24 48 55 56
COMMA                : 29 31
DIVIDE               : 36
ELSE                 : 50
EQUAL                : 21 55 56 57 58
FALSE                : 69
FOR                  : 52
FUN                  : 22 23 24 25
GREATER_THAN         : 41
GREATER_THAN_EQUAL   : 44
ID                   : 21 22 23 24 25 26 27 48 53 54 55 56 57 58 64
IF                   : 49 50
IN                   : 53 54
INT                  : 59
INTEGER_LITERAL      : 67
LBRACE               : 18 19
LESS_THAN            : 42
LESS_THAN_EQUAL      : 45
LOGICAL_AND          : 37
LOGICAL_EQUAL        : 39
LOGICAL_NOT          : 40
LOGICAL_OR           : 38
LPAREN               : 22 23 24 25 26 27 46 49 50 51 52 62 73
MINUS                : 2 34
NOT_EQUAL            : 43
PLUS                 : 33
PRINT                : 62
RANGE                : 53 54
RBRACE               : 18 19
READLINE             : 73
RETURN               : 20
RPAREN               : 22 23 24 25 26 27 46 49 50 51 52 62 73
SEMICOLON            : 71
STEP                 : 54
STRING               : 60
STRING_LITERAL       : 70
TIMES                : 35
TRUE                 : 68
VAL                  : 55 57
VAR                  : 56 58
WHILE                : 51
error                : 

Nonterminals, with rules where they appear

Literal              : 63
assignment           : 15
block                : 22 23 24 25 49 50 50 51 52
declaration          : 6 7 10
declarations         : 3 7
empty                : 72
expression           : 2 20 21 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 41 42 42 43 43 44 44 45 45 46 49 50 51 55 56 57 58 62
for_statement        : 14
function_calling     : 11 65
function_declaration : 9
if_statement         : 12
parameter_calling    : 28 29
parameter_declaration : 30 31
parameter_list_calling : 26 29
parameter_list_declaration : 22 23 31
print_statement      : 17
program              : 0
range_operator       : 52
readline             : 66
return_statement     : 16
semis                : 8 9 11 12 13 14 15 16 17
statement            : 4 5
statement_list       : 5 19
term                 : 32 47 53 53 54 54 54
type                 : 22 24 48 55 56
variable_declaration : 8
while_statement      : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (3) program -> . declarations
    (6) declarations -> . declaration
    (7) declarations -> . declarations declaration
    (8) declaration -> . variable_declaration semis
    (9) declaration -> . function_declaration semis
    (55) variable_declaration -> . VAL ID COLONS type EQUAL expression
    (56) variable_declaration -> . VAR ID COLONS type EQUAL expression
    (57) variable_declaration -> . VAL ID EQUAL expression
    (58) variable_declaration -> . VAR ID EQUAL expression
    (22) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> . FUN ID LPAREN RPAREN COLONS type block
    (25) function_declaration -> . FUN ID LPAREN RPAREN block

    VAL             shift and go to state 6
    VAR             shift and go to state 7
    FUN             shift and go to state 8

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    declaration                    shift and go to state 3
    variable_declaration           shift and go to state 4
    function_declaration           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (3) program -> declarations .
    (7) declarations -> declarations . declaration
    (8) declaration -> . variable_declaration semis
    (9) declaration -> . function_declaration semis
    (55) variable_declaration -> . VAL ID COLONS type EQUAL expression
    (56) variable_declaration -> . VAR ID COLONS type EQUAL expression
    (57) variable_declaration -> . VAL ID EQUAL expression
    (58) variable_declaration -> . VAR ID EQUAL expression
    (22) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> . FUN ID LPAREN RPAREN COLONS type block
    (25) function_declaration -> . FUN ID LPAREN RPAREN block

    $end            reduce using rule 3 (program -> declarations .)
    VAL             shift and go to state 6
    VAR             shift and go to state 7
    FUN             shift and go to state 8

    declaration                    shift and go to state 9
    variable_declaration           shift and go to state 4
    function_declaration           shift and go to state 5

state 3

    (6) declarations -> declaration .

    VAL             reduce using rule 6 (declarations -> declaration .)
    VAR             reduce using rule 6 (declarations -> declaration .)
    FUN             reduce using rule 6 (declarations -> declaration .)
    $end            reduce using rule 6 (declarations -> declaration .)


state 4

    (8) declaration -> variable_declaration . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)

    semis                          shift and go to state 10
    empty                          shift and go to state 12

state 5

    (9) declaration -> function_declaration . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)

    semis                          shift and go to state 13
    empty                          shift and go to state 12

state 6

    (55) variable_declaration -> VAL . ID COLONS type EQUAL expression
    (57) variable_declaration -> VAL . ID EQUAL expression

    ID              shift and go to state 14


state 7

    (56) variable_declaration -> VAR . ID COLONS type EQUAL expression
    (58) variable_declaration -> VAR . ID EQUAL expression

    ID              shift and go to state 15


state 8

    (22) function_declaration -> FUN . ID LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> FUN . ID LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> FUN . ID LPAREN RPAREN COLONS type block
    (25) function_declaration -> FUN . ID LPAREN RPAREN block

    ID              shift and go to state 16


state 9

    (7) declarations -> declarations declaration .

    VAL             reduce using rule 7 (declarations -> declarations declaration .)
    VAR             reduce using rule 7 (declarations -> declarations declaration .)
    FUN             reduce using rule 7 (declarations -> declarations declaration .)
    $end            reduce using rule 7 (declarations -> declarations declaration .)


state 10

    (8) declaration -> variable_declaration semis .

    VAL             reduce using rule 8 (declaration -> variable_declaration semis .)
    VAR             reduce using rule 8 (declaration -> variable_declaration semis .)
    FUN             reduce using rule 8 (declaration -> variable_declaration semis .)
    $end            reduce using rule 8 (declaration -> variable_declaration semis .)
    RBRACE          reduce using rule 8 (declaration -> variable_declaration semis .)
    ID              reduce using rule 8 (declaration -> variable_declaration semis .)
    IF              reduce using rule 8 (declaration -> variable_declaration semis .)
    WHILE           reduce using rule 8 (declaration -> variable_declaration semis .)
    FOR             reduce using rule 8 (declaration -> variable_declaration semis .)
    RETURN          reduce using rule 8 (declaration -> variable_declaration semis .)
    PRINT           reduce using rule 8 (declaration -> variable_declaration semis .)


state 11

    (71) semis -> SEMICOLON .

    VAL             reduce using rule 71 (semis -> SEMICOLON .)
    VAR             reduce using rule 71 (semis -> SEMICOLON .)
    FUN             reduce using rule 71 (semis -> SEMICOLON .)
    $end            reduce using rule 71 (semis -> SEMICOLON .)
    RBRACE          reduce using rule 71 (semis -> SEMICOLON .)
    ID              reduce using rule 71 (semis -> SEMICOLON .)
    IF              reduce using rule 71 (semis -> SEMICOLON .)
    WHILE           reduce using rule 71 (semis -> SEMICOLON .)
    FOR             reduce using rule 71 (semis -> SEMICOLON .)
    RETURN          reduce using rule 71 (semis -> SEMICOLON .)
    PRINT           reduce using rule 71 (semis -> SEMICOLON .)


state 12

    (72) semis -> empty .

    VAL             reduce using rule 72 (semis -> empty .)
    VAR             reduce using rule 72 (semis -> empty .)
    FUN             reduce using rule 72 (semis -> empty .)
    $end            reduce using rule 72 (semis -> empty .)
    RBRACE          reduce using rule 72 (semis -> empty .)
    ID              reduce using rule 72 (semis -> empty .)
    IF              reduce using rule 72 (semis -> empty .)
    WHILE           reduce using rule 72 (semis -> empty .)
    FOR             reduce using rule 72 (semis -> empty .)
    RETURN          reduce using rule 72 (semis -> empty .)
    PRINT           reduce using rule 72 (semis -> empty .)


state 13

    (9) declaration -> function_declaration semis .

    VAL             reduce using rule 9 (declaration -> function_declaration semis .)
    VAR             reduce using rule 9 (declaration -> function_declaration semis .)
    FUN             reduce using rule 9 (declaration -> function_declaration semis .)
    $end            reduce using rule 9 (declaration -> function_declaration semis .)
    RBRACE          reduce using rule 9 (declaration -> function_declaration semis .)
    ID              reduce using rule 9 (declaration -> function_declaration semis .)
    IF              reduce using rule 9 (declaration -> function_declaration semis .)
    WHILE           reduce using rule 9 (declaration -> function_declaration semis .)
    FOR             reduce using rule 9 (declaration -> function_declaration semis .)
    RETURN          reduce using rule 9 (declaration -> function_declaration semis .)
    PRINT           reduce using rule 9 (declaration -> function_declaration semis .)


state 14

    (55) variable_declaration -> VAL ID . COLONS type EQUAL expression
    (57) variable_declaration -> VAL ID . EQUAL expression

    COLONS          shift and go to state 17
    EQUAL           shift and go to state 18


state 15

    (56) variable_declaration -> VAR ID . COLONS type EQUAL expression
    (58) variable_declaration -> VAR ID . EQUAL expression

    COLONS          shift and go to state 19
    EQUAL           shift and go to state 20


state 16

    (22) function_declaration -> FUN ID . LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> FUN ID . LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> FUN ID . LPAREN RPAREN COLONS type block
    (25) function_declaration -> FUN ID . LPAREN RPAREN block

    LPAREN          shift and go to state 21


state 17

    (55) variable_declaration -> VAL ID COLONS . type EQUAL expression
    (59) type -> . INT
    (60) type -> . STRING
    (61) type -> . BOOLEAN

    INT             shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 22

state 18

    (57) variable_declaration -> VAL ID EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 27
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 19

    (56) variable_declaration -> VAR ID COLONS . type EQUAL expression
    (59) type -> . INT
    (60) type -> . STRING
    (61) type -> . BOOLEAN

    INT             shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 40

state 20

    (58) variable_declaration -> VAR ID EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 41
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 21

    (22) function_declaration -> FUN ID LPAREN . parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> FUN ID LPAREN . parameter_list_declaration RPAREN block
    (24) function_declaration -> FUN ID LPAREN . RPAREN COLONS type block
    (25) function_declaration -> FUN ID LPAREN . RPAREN block
    (30) parameter_list_declaration -> . parameter_declaration
    (31) parameter_list_declaration -> . parameter_list_declaration COMMA parameter_declaration
    (48) parameter_declaration -> . ID COLONS type

    RPAREN          shift and go to state 44
    ID              shift and go to state 42

    parameter_list_declaration     shift and go to state 43
    parameter_declaration          shift and go to state 45

state 22

    (55) variable_declaration -> VAL ID COLONS type . EQUAL expression

    EQUAL           shift and go to state 46


state 23

    (59) type -> INT .

    EQUAL           reduce using rule 59 (type -> INT .)
    RPAREN          reduce using rule 59 (type -> INT .)
    COMMA           reduce using rule 59 (type -> INT .)
    LBRACE          reduce using rule 59 (type -> INT .)


state 24

    (60) type -> STRING .

    EQUAL           reduce using rule 60 (type -> STRING .)
    RPAREN          reduce using rule 60 (type -> STRING .)
    COMMA           reduce using rule 60 (type -> STRING .)
    LBRACE          reduce using rule 60 (type -> STRING .)


state 25

    (61) type -> BOOLEAN .

    EQUAL           reduce using rule 61 (type -> BOOLEAN .)
    RPAREN          reduce using rule 61 (type -> BOOLEAN .)
    COMMA           reduce using rule 61 (type -> BOOLEAN .)
    LBRACE          reduce using rule 61 (type -> BOOLEAN .)


state 26

    (64) term -> ID .
    (26) function_calling -> ID . LPAREN parameter_list_calling RPAREN
    (27) function_calling -> ID . LPAREN RPAREN

    PLUS            reduce using rule 64 (term -> ID .)
    MINUS           reduce using rule 64 (term -> ID .)
    TIMES           reduce using rule 64 (term -> ID .)
    DIVIDE          reduce using rule 64 (term -> ID .)
    LOGICAL_AND     reduce using rule 64 (term -> ID .)
    LOGICAL_OR      reduce using rule 64 (term -> ID .)
    LOGICAL_EQUAL   reduce using rule 64 (term -> ID .)
    GREATER_THAN    reduce using rule 64 (term -> ID .)
    LESS_THAN       reduce using rule 64 (term -> ID .)
    NOT_EQUAL       reduce using rule 64 (term -> ID .)
    GREATER_THAN_EQUAL reduce using rule 64 (term -> ID .)
    LESS_THAN_EQUAL reduce using rule 64 (term -> ID .)
    SEMICOLON       reduce using rule 64 (term -> ID .)
    VAL             reduce using rule 64 (term -> ID .)
    VAR             reduce using rule 64 (term -> ID .)
    FUN             reduce using rule 64 (term -> ID .)
    $end            reduce using rule 64 (term -> ID .)
    RBRACE          reduce using rule 64 (term -> ID .)
    ID              reduce using rule 64 (term -> ID .)
    IF              reduce using rule 64 (term -> ID .)
    WHILE           reduce using rule 64 (term -> ID .)
    FOR             reduce using rule 64 (term -> ID .)
    RETURN          reduce using rule 64 (term -> ID .)
    PRINT           reduce using rule 64 (term -> ID .)
    RPAREN          reduce using rule 64 (term -> ID .)
    COMMA           reduce using rule 64 (term -> ID .)
    RANGE           reduce using rule 64 (term -> ID .)
    STEP            reduce using rule 64 (term -> ID .)
    LPAREN          shift and go to state 47


state 27

    (57) variable_declaration -> VAL ID EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    VAL             reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    VAR             reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    FUN             reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    $end            reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    RBRACE          reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    ID              reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    IF              reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    WHILE           reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    FOR             reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    RETURN          reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    PRINT           reduce using rule 57 (variable_declaration -> VAL ID EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 28

    (2) expression -> MINUS . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 60
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 29

    (32) expression -> term .

    PLUS            reduce using rule 32 (expression -> term .)
    MINUS           reduce using rule 32 (expression -> term .)
    TIMES           reduce using rule 32 (expression -> term .)
    DIVIDE          reduce using rule 32 (expression -> term .)
    LOGICAL_AND     reduce using rule 32 (expression -> term .)
    LOGICAL_OR      reduce using rule 32 (expression -> term .)
    LOGICAL_EQUAL   reduce using rule 32 (expression -> term .)
    GREATER_THAN    reduce using rule 32 (expression -> term .)
    LESS_THAN       reduce using rule 32 (expression -> term .)
    NOT_EQUAL       reduce using rule 32 (expression -> term .)
    GREATER_THAN_EQUAL reduce using rule 32 (expression -> term .)
    LESS_THAN_EQUAL reduce using rule 32 (expression -> term .)
    SEMICOLON       reduce using rule 32 (expression -> term .)
    VAL             reduce using rule 32 (expression -> term .)
    VAR             reduce using rule 32 (expression -> term .)
    FUN             reduce using rule 32 (expression -> term .)
    $end            reduce using rule 32 (expression -> term .)
    RBRACE          reduce using rule 32 (expression -> term .)
    ID              reduce using rule 32 (expression -> term .)
    IF              reduce using rule 32 (expression -> term .)
    WHILE           reduce using rule 32 (expression -> term .)
    FOR             reduce using rule 32 (expression -> term .)
    RETURN          reduce using rule 32 (expression -> term .)
    PRINT           reduce using rule 32 (expression -> term .)
    RPAREN          reduce using rule 32 (expression -> term .)


state 30

    (40) expression -> LOGICAL_NOT . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 61
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 31

    (46) expression -> LPAREN . expression RPAREN
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 62
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 32

    (63) term -> Literal .

    PLUS            reduce using rule 63 (term -> Literal .)
    MINUS           reduce using rule 63 (term -> Literal .)
    TIMES           reduce using rule 63 (term -> Literal .)
    DIVIDE          reduce using rule 63 (term -> Literal .)
    LOGICAL_AND     reduce using rule 63 (term -> Literal .)
    LOGICAL_OR      reduce using rule 63 (term -> Literal .)
    LOGICAL_EQUAL   reduce using rule 63 (term -> Literal .)
    GREATER_THAN    reduce using rule 63 (term -> Literal .)
    LESS_THAN       reduce using rule 63 (term -> Literal .)
    NOT_EQUAL       reduce using rule 63 (term -> Literal .)
    GREATER_THAN_EQUAL reduce using rule 63 (term -> Literal .)
    LESS_THAN_EQUAL reduce using rule 63 (term -> Literal .)
    SEMICOLON       reduce using rule 63 (term -> Literal .)
    VAL             reduce using rule 63 (term -> Literal .)
    VAR             reduce using rule 63 (term -> Literal .)
    FUN             reduce using rule 63 (term -> Literal .)
    $end            reduce using rule 63 (term -> Literal .)
    RBRACE          reduce using rule 63 (term -> Literal .)
    ID              reduce using rule 63 (term -> Literal .)
    IF              reduce using rule 63 (term -> Literal .)
    WHILE           reduce using rule 63 (term -> Literal .)
    FOR             reduce using rule 63 (term -> Literal .)
    RETURN          reduce using rule 63 (term -> Literal .)
    PRINT           reduce using rule 63 (term -> Literal .)
    RPAREN          reduce using rule 63 (term -> Literal .)
    COMMA           reduce using rule 63 (term -> Literal .)
    RANGE           reduce using rule 63 (term -> Literal .)
    STEP            reduce using rule 63 (term -> Literal .)


state 33

    (65) term -> function_calling .

    PLUS            reduce using rule 65 (term -> function_calling .)
    MINUS           reduce using rule 65 (term -> function_calling .)
    TIMES           reduce using rule 65 (term -> function_calling .)
    DIVIDE          reduce using rule 65 (term -> function_calling .)
    LOGICAL_AND     reduce using rule 65 (term -> function_calling .)
    LOGICAL_OR      reduce using rule 65 (term -> function_calling .)
    LOGICAL_EQUAL   reduce using rule 65 (term -> function_calling .)
    GREATER_THAN    reduce using rule 65 (term -> function_calling .)
    LESS_THAN       reduce using rule 65 (term -> function_calling .)
    NOT_EQUAL       reduce using rule 65 (term -> function_calling .)
    GREATER_THAN_EQUAL reduce using rule 65 (term -> function_calling .)
    LESS_THAN_EQUAL reduce using rule 65 (term -> function_calling .)
    SEMICOLON       reduce using rule 65 (term -> function_calling .)
    VAL             reduce using rule 65 (term -> function_calling .)
    VAR             reduce using rule 65 (term -> function_calling .)
    FUN             reduce using rule 65 (term -> function_calling .)
    $end            reduce using rule 65 (term -> function_calling .)
    RBRACE          reduce using rule 65 (term -> function_calling .)
    ID              reduce using rule 65 (term -> function_calling .)
    IF              reduce using rule 65 (term -> function_calling .)
    WHILE           reduce using rule 65 (term -> function_calling .)
    FOR             reduce using rule 65 (term -> function_calling .)
    RETURN          reduce using rule 65 (term -> function_calling .)
    PRINT           reduce using rule 65 (term -> function_calling .)
    RPAREN          reduce using rule 65 (term -> function_calling .)
    COMMA           reduce using rule 65 (term -> function_calling .)
    RANGE           reduce using rule 65 (term -> function_calling .)
    STEP            reduce using rule 65 (term -> function_calling .)


state 34

    (66) term -> readline .

    PLUS            reduce using rule 66 (term -> readline .)
    MINUS           reduce using rule 66 (term -> readline .)
    TIMES           reduce using rule 66 (term -> readline .)
    DIVIDE          reduce using rule 66 (term -> readline .)
    LOGICAL_AND     reduce using rule 66 (term -> readline .)
    LOGICAL_OR      reduce using rule 66 (term -> readline .)
    LOGICAL_EQUAL   reduce using rule 66 (term -> readline .)
    GREATER_THAN    reduce using rule 66 (term -> readline .)
    LESS_THAN       reduce using rule 66 (term -> readline .)
    NOT_EQUAL       reduce using rule 66 (term -> readline .)
    GREATER_THAN_EQUAL reduce using rule 66 (term -> readline .)
    LESS_THAN_EQUAL reduce using rule 66 (term -> readline .)
    SEMICOLON       reduce using rule 66 (term -> readline .)
    VAL             reduce using rule 66 (term -> readline .)
    VAR             reduce using rule 66 (term -> readline .)
    FUN             reduce using rule 66 (term -> readline .)
    $end            reduce using rule 66 (term -> readline .)
    RBRACE          reduce using rule 66 (term -> readline .)
    ID              reduce using rule 66 (term -> readline .)
    IF              reduce using rule 66 (term -> readline .)
    WHILE           reduce using rule 66 (term -> readline .)
    FOR             reduce using rule 66 (term -> readline .)
    RETURN          reduce using rule 66 (term -> readline .)
    PRINT           reduce using rule 66 (term -> readline .)
    RPAREN          reduce using rule 66 (term -> readline .)
    COMMA           reduce using rule 66 (term -> readline .)
    RANGE           reduce using rule 66 (term -> readline .)
    STEP            reduce using rule 66 (term -> readline .)


state 35

    (67) Literal -> INTEGER_LITERAL .

    PLUS            reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    MINUS           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    TIMES           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    DIVIDE          reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    LOGICAL_AND     reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    LOGICAL_OR      reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    LOGICAL_EQUAL   reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    GREATER_THAN    reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    LESS_THAN       reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    NOT_EQUAL       reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    SEMICOLON       reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    VAL             reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    VAR             reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    FUN             reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    $end            reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    RBRACE          reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    ID              reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    IF              reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    WHILE           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    FOR             reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    RETURN          reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    PRINT           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    RPAREN          reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    COMMA           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    RANGE           reduce using rule 67 (Literal -> INTEGER_LITERAL .)
    STEP            reduce using rule 67 (Literal -> INTEGER_LITERAL .)


state 36

    (68) Literal -> TRUE .

    PLUS            reduce using rule 68 (Literal -> TRUE .)
    MINUS           reduce using rule 68 (Literal -> TRUE .)
    TIMES           reduce using rule 68 (Literal -> TRUE .)
    DIVIDE          reduce using rule 68 (Literal -> TRUE .)
    LOGICAL_AND     reduce using rule 68 (Literal -> TRUE .)
    LOGICAL_OR      reduce using rule 68 (Literal -> TRUE .)
    LOGICAL_EQUAL   reduce using rule 68 (Literal -> TRUE .)
    GREATER_THAN    reduce using rule 68 (Literal -> TRUE .)
    LESS_THAN       reduce using rule 68 (Literal -> TRUE .)
    NOT_EQUAL       reduce using rule 68 (Literal -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 68 (Literal -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 68 (Literal -> TRUE .)
    SEMICOLON       reduce using rule 68 (Literal -> TRUE .)
    VAL             reduce using rule 68 (Literal -> TRUE .)
    VAR             reduce using rule 68 (Literal -> TRUE .)
    FUN             reduce using rule 68 (Literal -> TRUE .)
    $end            reduce using rule 68 (Literal -> TRUE .)
    RBRACE          reduce using rule 68 (Literal -> TRUE .)
    ID              reduce using rule 68 (Literal -> TRUE .)
    IF              reduce using rule 68 (Literal -> TRUE .)
    WHILE           reduce using rule 68 (Literal -> TRUE .)
    FOR             reduce using rule 68 (Literal -> TRUE .)
    RETURN          reduce using rule 68 (Literal -> TRUE .)
    PRINT           reduce using rule 68 (Literal -> TRUE .)
    RPAREN          reduce using rule 68 (Literal -> TRUE .)
    COMMA           reduce using rule 68 (Literal -> TRUE .)
    RANGE           reduce using rule 68 (Literal -> TRUE .)
    STEP            reduce using rule 68 (Literal -> TRUE .)


state 37

    (69) Literal -> FALSE .

    PLUS            reduce using rule 69 (Literal -> FALSE .)
    MINUS           reduce using rule 69 (Literal -> FALSE .)
    TIMES           reduce using rule 69 (Literal -> FALSE .)
    DIVIDE          reduce using rule 69 (Literal -> FALSE .)
    LOGICAL_AND     reduce using rule 69 (Literal -> FALSE .)
    LOGICAL_OR      reduce using rule 69 (Literal -> FALSE .)
    LOGICAL_EQUAL   reduce using rule 69 (Literal -> FALSE .)
    GREATER_THAN    reduce using rule 69 (Literal -> FALSE .)
    LESS_THAN       reduce using rule 69 (Literal -> FALSE .)
    NOT_EQUAL       reduce using rule 69 (Literal -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 69 (Literal -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 69 (Literal -> FALSE .)
    SEMICOLON       reduce using rule 69 (Literal -> FALSE .)
    VAL             reduce using rule 69 (Literal -> FALSE .)
    VAR             reduce using rule 69 (Literal -> FALSE .)
    FUN             reduce using rule 69 (Literal -> FALSE .)
    $end            reduce using rule 69 (Literal -> FALSE .)
    RBRACE          reduce using rule 69 (Literal -> FALSE .)
    ID              reduce using rule 69 (Literal -> FALSE .)
    IF              reduce using rule 69 (Literal -> FALSE .)
    WHILE           reduce using rule 69 (Literal -> FALSE .)
    FOR             reduce using rule 69 (Literal -> FALSE .)
    RETURN          reduce using rule 69 (Literal -> FALSE .)
    PRINT           reduce using rule 69 (Literal -> FALSE .)
    RPAREN          reduce using rule 69 (Literal -> FALSE .)
    COMMA           reduce using rule 69 (Literal -> FALSE .)
    RANGE           reduce using rule 69 (Literal -> FALSE .)
    STEP            reduce using rule 69 (Literal -> FALSE .)


state 38

    (70) Literal -> STRING_LITERAL .

    PLUS            reduce using rule 70 (Literal -> STRING_LITERAL .)
    MINUS           reduce using rule 70 (Literal -> STRING_LITERAL .)
    TIMES           reduce using rule 70 (Literal -> STRING_LITERAL .)
    DIVIDE          reduce using rule 70 (Literal -> STRING_LITERAL .)
    LOGICAL_AND     reduce using rule 70 (Literal -> STRING_LITERAL .)
    LOGICAL_OR      reduce using rule 70 (Literal -> STRING_LITERAL .)
    LOGICAL_EQUAL   reduce using rule 70 (Literal -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 70 (Literal -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 70 (Literal -> STRING_LITERAL .)
    NOT_EQUAL       reduce using rule 70 (Literal -> STRING_LITERAL .)
    GREATER_THAN_EQUAL reduce using rule 70 (Literal -> STRING_LITERAL .)
    LESS_THAN_EQUAL reduce using rule 70 (Literal -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 70 (Literal -> STRING_LITERAL .)
    VAL             reduce using rule 70 (Literal -> STRING_LITERAL .)
    VAR             reduce using rule 70 (Literal -> STRING_LITERAL .)
    FUN             reduce using rule 70 (Literal -> STRING_LITERAL .)
    $end            reduce using rule 70 (Literal -> STRING_LITERAL .)
    RBRACE          reduce using rule 70 (Literal -> STRING_LITERAL .)
    ID              reduce using rule 70 (Literal -> STRING_LITERAL .)
    IF              reduce using rule 70 (Literal -> STRING_LITERAL .)
    WHILE           reduce using rule 70 (Literal -> STRING_LITERAL .)
    FOR             reduce using rule 70 (Literal -> STRING_LITERAL .)
    RETURN          reduce using rule 70 (Literal -> STRING_LITERAL .)
    PRINT           reduce using rule 70 (Literal -> STRING_LITERAL .)
    RPAREN          reduce using rule 70 (Literal -> STRING_LITERAL .)
    COMMA           reduce using rule 70 (Literal -> STRING_LITERAL .)
    RANGE           reduce using rule 70 (Literal -> STRING_LITERAL .)
    STEP            reduce using rule 70 (Literal -> STRING_LITERAL .)


state 39

    (73) readline -> READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 63


state 40

    (56) variable_declaration -> VAR ID COLONS type . EQUAL expression

    EQUAL           shift and go to state 64


state 41

    (58) variable_declaration -> VAR ID EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    VAL             reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    VAR             reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    FUN             reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    $end            reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    ID              reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    IF              reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    WHILE           reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    FOR             reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    RETURN          reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    PRINT           reduce using rule 58 (variable_declaration -> VAR ID EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 42

    (48) parameter_declaration -> ID . COLONS type

    COLONS          shift and go to state 65


state 43

    (22) function_declaration -> FUN ID LPAREN parameter_list_declaration . RPAREN COLONS type block
    (23) function_declaration -> FUN ID LPAREN parameter_list_declaration . RPAREN block
    (31) parameter_list_declaration -> parameter_list_declaration . COMMA parameter_declaration

    RPAREN          shift and go to state 66
    COMMA           shift and go to state 67


state 44

    (24) function_declaration -> FUN ID LPAREN RPAREN . COLONS type block
    (25) function_declaration -> FUN ID LPAREN RPAREN . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    COLONS          shift and go to state 68
    LBRACE          shift and go to state 70

    block                          shift and go to state 69

state 45

    (30) parameter_list_declaration -> parameter_declaration .

    RPAREN          reduce using rule 30 (parameter_list_declaration -> parameter_declaration .)
    COMMA           reduce using rule 30 (parameter_list_declaration -> parameter_declaration .)


state 46

    (55) variable_declaration -> VAL ID COLONS type EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 71
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 47

    (26) function_calling -> ID LPAREN . parameter_list_calling RPAREN
    (27) function_calling -> ID LPAREN . RPAREN
    (28) parameter_list_calling -> . parameter_calling
    (29) parameter_list_calling -> . parameter_list_calling COMMA parameter_calling
    (47) parameter_calling -> . term
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    RPAREN          shift and go to state 73
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    parameter_list_calling         shift and go to state 72
    parameter_calling              shift and go to state 74
    term                           shift and go to state 75
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 48

    (33) expression -> expression PLUS . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 76
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 49

    (34) expression -> expression MINUS . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 77
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 50

    (35) expression -> expression TIMES . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 78
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 51

    (36) expression -> expression DIVIDE . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 79
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 52

    (37) expression -> expression LOGICAL_AND . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 80
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 53

    (38) expression -> expression LOGICAL_OR . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 81
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 54

    (39) expression -> expression LOGICAL_EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 82
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 55

    (41) expression -> expression GREATER_THAN . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 83
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 56

    (42) expression -> expression LESS_THAN . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 84
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 57

    (43) expression -> expression NOT_EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 85
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 58

    (44) expression -> expression GREATER_THAN_EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 86
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 59

    (45) expression -> expression LESS_THAN_EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 87
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 60

    (2) expression -> MINUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 2 (expression -> MINUS expression .)
    MINUS           reduce using rule 2 (expression -> MINUS expression .)
    TIMES           reduce using rule 2 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 2 (expression -> MINUS expression .)
    LOGICAL_AND     reduce using rule 2 (expression -> MINUS expression .)
    LOGICAL_OR      reduce using rule 2 (expression -> MINUS expression .)
    LOGICAL_EQUAL   reduce using rule 2 (expression -> MINUS expression .)
    GREATER_THAN    reduce using rule 2 (expression -> MINUS expression .)
    LESS_THAN       reduce using rule 2 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 2 (expression -> MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 2 (expression -> MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 2 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 2 (expression -> MINUS expression .)
    VAL             reduce using rule 2 (expression -> MINUS expression .)
    VAR             reduce using rule 2 (expression -> MINUS expression .)
    FUN             reduce using rule 2 (expression -> MINUS expression .)
    $end            reduce using rule 2 (expression -> MINUS expression .)
    RBRACE          reduce using rule 2 (expression -> MINUS expression .)
    ID              reduce using rule 2 (expression -> MINUS expression .)
    IF              reduce using rule 2 (expression -> MINUS expression .)
    WHILE           reduce using rule 2 (expression -> MINUS expression .)
    FOR             reduce using rule 2 (expression -> MINUS expression .)
    RETURN          reduce using rule 2 (expression -> MINUS expression .)
    PRINT           reduce using rule 2 (expression -> MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 61

    (40) expression -> LOGICAL_NOT expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    MINUS           reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    TIMES           reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    DIVIDE          reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    LOGICAL_AND     reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    LOGICAL_OR      reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    LOGICAL_EQUAL   reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    GREATER_THAN    reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    LESS_THAN       reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    NOT_EQUAL       reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    GREATER_THAN_EQUAL reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    LESS_THAN_EQUAL reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    SEMICOLON       reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    VAL             reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    VAR             reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    FUN             reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    $end            reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    RBRACE          reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    ID              reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    IF              reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    WHILE           reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    FOR             reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    RETURN          reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    PRINT           reduce using rule 40 (expression -> LOGICAL_NOT expression .)
    RPAREN          reduce using rule 40 (expression -> LOGICAL_NOT expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 62

    (46) expression -> LPAREN expression . RPAREN
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 63

    (73) readline -> READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 89


state 64

    (56) variable_declaration -> VAR ID COLONS type EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 90
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 65

    (48) parameter_declaration -> ID COLONS . type
    (59) type -> . INT
    (60) type -> . STRING
    (61) type -> . BOOLEAN

    INT             shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 91

state 66

    (22) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN . COLONS type block
    (23) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    COLONS          shift and go to state 92
    LBRACE          shift and go to state 70

    block                          shift and go to state 93

state 67

    (31) parameter_list_declaration -> parameter_list_declaration COMMA . parameter_declaration
    (48) parameter_declaration -> . ID COLONS type

    ID              shift and go to state 42

    parameter_declaration          shift and go to state 94

state 68

    (24) function_declaration -> FUN ID LPAREN RPAREN COLONS . type block
    (59) type -> . INT
    (60) type -> . STRING
    (61) type -> . BOOLEAN

    INT             shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 95

state 69

    (25) function_declaration -> FUN ID LPAREN RPAREN block .

    SEMICOLON       reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    VAL             reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    VAR             reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    FUN             reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    $end            reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    RBRACE          reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    ID              reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    IF              reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    WHILE           reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    FOR             reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    RETURN          reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)
    PRINT           reduce using rule 25 (function_declaration -> FUN ID LPAREN RPAREN block .)


state 70

    (18) block -> LBRACE . RBRACE
    (19) block -> LBRACE . statement_list RBRACE
    (4) statement_list -> . statement
    (5) statement_list -> . statement_list statement
    (10) statement -> . declaration
    (11) statement -> . function_calling semis
    (12) statement -> . if_statement semis
    (13) statement -> . while_statement semis
    (14) statement -> . for_statement semis
    (15) statement -> . assignment semis
    (16) statement -> . return_statement semis
    (17) statement -> . print_statement semis
    (8) declaration -> . variable_declaration semis
    (9) declaration -> . function_declaration semis
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (49) if_statement -> . IF LPAREN expression RPAREN block
    (50) if_statement -> . IF LPAREN expression RPAREN block ELSE block
    (51) while_statement -> . WHILE LPAREN expression RPAREN block
    (52) for_statement -> . FOR LPAREN range_operator RPAREN block
    (21) assignment -> . ID EQUAL expression
    (20) return_statement -> . RETURN expression
    (62) print_statement -> . PRINT LPAREN expression RPAREN
    (55) variable_declaration -> . VAL ID COLONS type EQUAL expression
    (56) variable_declaration -> . VAR ID COLONS type EQUAL expression
    (57) variable_declaration -> . VAL ID EQUAL expression
    (58) variable_declaration -> . VAR ID EQUAL expression
    (22) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> . FUN ID LPAREN RPAREN COLONS type block
    (25) function_declaration -> . FUN ID LPAREN RPAREN block

    RBRACE          shift and go to state 96
    ID              shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    RETURN          shift and go to state 111
    PRINT           shift and go to state 112
    VAL             shift and go to state 6
    VAR             shift and go to state 7
    FUN             shift and go to state 8

    statement_list                 shift and go to state 97
    statement                      shift and go to state 98
    declaration                    shift and go to state 99
    function_calling               shift and go to state 100
    if_statement                   shift and go to state 101
    while_statement                shift and go to state 102
    for_statement                  shift and go to state 103
    assignment                     shift and go to state 104
    return_statement               shift and go to state 105
    print_statement                shift and go to state 106
    variable_declaration           shift and go to state 4
    function_declaration           shift and go to state 5

state 71

    (55) variable_declaration -> VAL ID COLONS type EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    VAL             reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    VAR             reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    FUN             reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    $end            reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    RBRACE          reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    ID              reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    IF              reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    WHILE           reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    FOR             reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    RETURN          reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    PRINT           reduce using rule 55 (variable_declaration -> VAL ID COLONS type EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 72

    (26) function_calling -> ID LPAREN parameter_list_calling . RPAREN
    (29) parameter_list_calling -> parameter_list_calling . COMMA parameter_calling

    RPAREN          shift and go to state 113
    COMMA           shift and go to state 114


state 73

    (27) function_calling -> ID LPAREN RPAREN .

    PLUS            reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    LOGICAL_EQUAL   reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    VAL             reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    VAR             reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    FUN             reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    $end            reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    ID              reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    IF              reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    FOR             reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    RANGE           reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)
    STEP            reduce using rule 27 (function_calling -> ID LPAREN RPAREN .)


state 74

    (28) parameter_list_calling -> parameter_calling .

    RPAREN          reduce using rule 28 (parameter_list_calling -> parameter_calling .)
    COMMA           reduce using rule 28 (parameter_list_calling -> parameter_calling .)


state 75

    (47) parameter_calling -> term .

    RPAREN          reduce using rule 47 (parameter_calling -> term .)
    COMMA           reduce using rule 47 (parameter_calling -> term .)


state 76

    (33) expression -> expression PLUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 33 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 33 (expression -> expression PLUS expression .)
    LOGICAL_AND     reduce using rule 33 (expression -> expression PLUS expression .)
    LOGICAL_OR      reduce using rule 33 (expression -> expression PLUS expression .)
    LOGICAL_EQUAL   reduce using rule 33 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 33 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 33 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 33 (expression -> expression PLUS expression .)
    GREATER_THAN_EQUAL reduce using rule 33 (expression -> expression PLUS expression .)
    LESS_THAN_EQUAL reduce using rule 33 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression PLUS expression .)
    VAL             reduce using rule 33 (expression -> expression PLUS expression .)
    VAR             reduce using rule 33 (expression -> expression PLUS expression .)
    FUN             reduce using rule 33 (expression -> expression PLUS expression .)
    $end            reduce using rule 33 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 33 (expression -> expression PLUS expression .)
    ID              reduce using rule 33 (expression -> expression PLUS expression .)
    IF              reduce using rule 33 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 33 (expression -> expression PLUS expression .)
    FOR             reduce using rule 33 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 33 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 33 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 33 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! TIMES           [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 77

    (34) expression -> expression MINUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 34 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 34 (expression -> expression MINUS expression .)
    LOGICAL_AND     reduce using rule 34 (expression -> expression MINUS expression .)
    LOGICAL_OR      reduce using rule 34 (expression -> expression MINUS expression .)
    LOGICAL_EQUAL   reduce using rule 34 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 34 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 34 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 34 (expression -> expression MINUS expression .)
    GREATER_THAN_EQUAL reduce using rule 34 (expression -> expression MINUS expression .)
    LESS_THAN_EQUAL reduce using rule 34 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression MINUS expression .)
    VAL             reduce using rule 34 (expression -> expression MINUS expression .)
    VAR             reduce using rule 34 (expression -> expression MINUS expression .)
    FUN             reduce using rule 34 (expression -> expression MINUS expression .)
    $end            reduce using rule 34 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 34 (expression -> expression MINUS expression .)
    ID              reduce using rule 34 (expression -> expression MINUS expression .)
    IF              reduce using rule 34 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 34 (expression -> expression MINUS expression .)
    FOR             reduce using rule 34 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 34 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 34 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 34 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! TIMES           [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 78

    (35) expression -> expression TIMES expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 35 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 35 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 35 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 35 (expression -> expression TIMES expression .)
    LOGICAL_AND     reduce using rule 35 (expression -> expression TIMES expression .)
    LOGICAL_OR      reduce using rule 35 (expression -> expression TIMES expression .)
    LOGICAL_EQUAL   reduce using rule 35 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 35 (expression -> expression TIMES expression .)
    NOT_EQUAL       reduce using rule 35 (expression -> expression TIMES expression .)
    GREATER_THAN_EQUAL reduce using rule 35 (expression -> expression TIMES expression .)
    LESS_THAN_EQUAL reduce using rule 35 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression TIMES expression .)
    VAL             reduce using rule 35 (expression -> expression TIMES expression .)
    VAR             reduce using rule 35 (expression -> expression TIMES expression .)
    FUN             reduce using rule 35 (expression -> expression TIMES expression .)
    $end            reduce using rule 35 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 35 (expression -> expression TIMES expression .)
    ID              reduce using rule 35 (expression -> expression TIMES expression .)
    IF              reduce using rule 35 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 35 (expression -> expression TIMES expression .)
    FOR             reduce using rule 35 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 35 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 35 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 35 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 79

    (36) expression -> expression DIVIDE expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    PLUS            reduce using rule 36 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 36 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 36 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 36 (expression -> expression DIVIDE expression .)
    LOGICAL_AND     reduce using rule 36 (expression -> expression DIVIDE expression .)
    LOGICAL_OR      reduce using rule 36 (expression -> expression DIVIDE expression .)
    LOGICAL_EQUAL   reduce using rule 36 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 36 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 36 (expression -> expression DIVIDE expression .)
    GREATER_THAN_EQUAL reduce using rule 36 (expression -> expression DIVIDE expression .)
    LESS_THAN_EQUAL reduce using rule 36 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression DIVIDE expression .)
    VAL             reduce using rule 36 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 36 (expression -> expression DIVIDE expression .)
    FUN             reduce using rule 36 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 36 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 36 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 36 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 36 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 36 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 36 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 36 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 36 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 36 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 80

    (37) expression -> expression LOGICAL_AND expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    LOGICAL_OR      reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    VAL             reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    VAR             reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    FUN             reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    $end            reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    RBRACE          reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    ID              reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    IF              reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    WHILE           reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    FOR             reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    RETURN          reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    PRINT           reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    RPAREN          reduce using rule 37 (expression -> expression LOGICAL_AND expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59

  ! PLUS            [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_EQUAL   [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_THAN       [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 37 (expression -> expression LOGICAL_AND expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]


state 81

    (38) expression -> expression LOGICAL_OR expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_OR      reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    VAL             reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    VAR             reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    FUN             reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    $end            reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    RBRACE          reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    ID              reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    IF              reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    WHILE           reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    FOR             reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    RETURN          reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    PRINT           reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    RPAREN          reduce using rule 38 (expression -> expression LOGICAL_OR expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59

  ! PLUS            [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_AND     [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_EQUAL   [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_THAN       [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 38 (expression -> expression LOGICAL_OR expression .) ]
  ! LOGICAL_OR      [ shift and go to state 53 ]


state 82

    (39) expression -> expression LOGICAL_EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    LOGICAL_OR      reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    LOGICAL_EQUAL   reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    NOT_EQUAL       reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    VAL             reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    VAR             reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    FUN             reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    $end            reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    RBRACE          reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    ID              reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    IF              reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    WHILE           reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    FOR             reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    RETURN          reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    PRINT           reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    RPAREN          reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59

  ! PLUS            [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 39 (expression -> expression LOGICAL_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]


state 83

    (41) expression -> expression GREATER_THAN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LOGICAL_OR      reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LOGICAL_EQUAL   reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LESS_THAN       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    VAL             reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    VAR             reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    FUN             reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    RBRACE          reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    ID              reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    RPAREN          reduce using rule 41 (expression -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! PLUS            [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression GREATER_THAN expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 84

    (42) expression -> expression LESS_THAN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LOGICAL_OR      reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LOGICAL_EQUAL   reduce using rule 42 (expression -> expression LESS_THAN expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LESS_THAN       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    GREATER_THAN_EQUAL reduce using rule 42 (expression -> expression LESS_THAN expression .)
    LESS_THAN_EQUAL reduce using rule 42 (expression -> expression LESS_THAN expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression LESS_THAN expression .)
    VAL             reduce using rule 42 (expression -> expression LESS_THAN expression .)
    VAR             reduce using rule 42 (expression -> expression LESS_THAN expression .)
    FUN             reduce using rule 42 (expression -> expression LESS_THAN expression .)
    $end            reduce using rule 42 (expression -> expression LESS_THAN expression .)
    RBRACE          reduce using rule 42 (expression -> expression LESS_THAN expression .)
    ID              reduce using rule 42 (expression -> expression LESS_THAN expression .)
    IF              reduce using rule 42 (expression -> expression LESS_THAN expression .)
    WHILE           reduce using rule 42 (expression -> expression LESS_THAN expression .)
    FOR             reduce using rule 42 (expression -> expression LESS_THAN expression .)
    RETURN          reduce using rule 42 (expression -> expression LESS_THAN expression .)
    PRINT           reduce using rule 42 (expression -> expression LESS_THAN expression .)
    RPAREN          reduce using rule 42 (expression -> expression LESS_THAN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! PLUS            [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression LESS_THAN expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 85

    (43) expression -> expression NOT_EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LOGICAL_OR      reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    LOGICAL_EQUAL   reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    VAL             reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    VAR             reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    FUN             reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RBRACE          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 43 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59

  ! PLUS            [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN    [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN       [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 43 (expression -> expression NOT_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]


state 86

    (44) expression -> expression GREATER_THAN_EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LOGICAL_OR      reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LOGICAL_EQUAL   reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    VAL             reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    VAR             reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    FUN             reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    $end            reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    RBRACE          reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    ID              reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    IF              reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    WHILE           reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    FOR             reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    RETURN          reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    PRINT           reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    RPAREN          reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! PLUS            [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression GREATER_THAN_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 87

    (45) expression -> expression LESS_THAN_EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    LOGICAL_AND     reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LOGICAL_OR      reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LOGICAL_EQUAL   reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    GREATER_THAN_EQUAL reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    LESS_THAN_EQUAL reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    VAL             reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    VAR             reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    FUN             reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    $end            reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    RBRACE          reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    ID              reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    IF              reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    WHILE           reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    FOR             reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    RETURN          reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    PRINT           reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    RPAREN          reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51

  ! PLUS            [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression LESS_THAN_EQUAL expression .) ]
  ! LOGICAL_AND     [ shift and go to state 52 ]
  ! LOGICAL_OR      [ shift and go to state 53 ]
  ! LOGICAL_EQUAL   [ shift and go to state 54 ]
  ! GREATER_THAN    [ shift and go to state 55 ]
  ! LESS_THAN       [ shift and go to state 56 ]
  ! NOT_EQUAL       [ shift and go to state 57 ]
  ! GREATER_THAN_EQUAL [ shift and go to state 58 ]
  ! LESS_THAN_EQUAL [ shift and go to state 59 ]


state 88

    (46) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LOGICAL_AND     reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LOGICAL_OR      reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LOGICAL_EQUAL   reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 46 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 46 (expression -> LPAREN expression RPAREN .)


state 89

    (73) readline -> READLINE LPAREN RPAREN .

    PLUS            reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    MINUS           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    TIMES           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    DIVIDE          reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    LOGICAL_AND     reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    LOGICAL_OR      reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    LOGICAL_EQUAL   reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    LESS_THAN       reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    VAL             reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    VAR             reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    FUN             reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    $end            reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    RBRACE          reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    ID              reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    IF              reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    WHILE           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    FOR             reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    RETURN          reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    PRINT           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    RPAREN          reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    COMMA           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    RANGE           reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)
    STEP            reduce using rule 73 (readline -> READLINE LPAREN RPAREN .)


state 90

    (56) variable_declaration -> VAR ID COLONS type EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    VAL             reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    VAR             reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    FUN             reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    $end            reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    RBRACE          reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    ID              reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    IF              reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    WHILE           reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    FOR             reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    RETURN          reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    PRINT           reduce using rule 56 (variable_declaration -> VAR ID COLONS type EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 91

    (48) parameter_declaration -> ID COLONS type .

    RPAREN          reduce using rule 48 (parameter_declaration -> ID COLONS type .)
    COMMA           reduce using rule 48 (parameter_declaration -> ID COLONS type .)


state 92

    (22) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS . type block
    (59) type -> . INT
    (60) type -> . STRING
    (61) type -> . BOOLEAN

    INT             shift and go to state 23
    STRING          shift and go to state 24
    BOOLEAN         shift and go to state 25

    type                           shift and go to state 115

state 93

    (23) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .

    SEMICOLON       reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    VAL             reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    VAR             reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    FUN             reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    $end            reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    RBRACE          reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    ID              reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    IF              reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    WHILE           reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    FOR             reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    RETURN          reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)
    PRINT           reduce using rule 23 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN block .)


state 94

    (31) parameter_list_declaration -> parameter_list_declaration COMMA parameter_declaration .

    RPAREN          reduce using rule 31 (parameter_list_declaration -> parameter_list_declaration COMMA parameter_declaration .)
    COMMA           reduce using rule 31 (parameter_list_declaration -> parameter_list_declaration COMMA parameter_declaration .)


state 95

    (24) function_declaration -> FUN ID LPAREN RPAREN COLONS type . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 116

state 96

    (18) block -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 18 (block -> LBRACE RBRACE .)
    VAL             reduce using rule 18 (block -> LBRACE RBRACE .)
    VAR             reduce using rule 18 (block -> LBRACE RBRACE .)
    FUN             reduce using rule 18 (block -> LBRACE RBRACE .)
    $end            reduce using rule 18 (block -> LBRACE RBRACE .)
    RBRACE          reduce using rule 18 (block -> LBRACE RBRACE .)
    ID              reduce using rule 18 (block -> LBRACE RBRACE .)
    IF              reduce using rule 18 (block -> LBRACE RBRACE .)
    WHILE           reduce using rule 18 (block -> LBRACE RBRACE .)
    FOR             reduce using rule 18 (block -> LBRACE RBRACE .)
    RETURN          reduce using rule 18 (block -> LBRACE RBRACE .)
    PRINT           reduce using rule 18 (block -> LBRACE RBRACE .)
    ELSE            reduce using rule 18 (block -> LBRACE RBRACE .)


state 97

    (19) block -> LBRACE statement_list . RBRACE
    (5) statement_list -> statement_list . statement
    (10) statement -> . declaration
    (11) statement -> . function_calling semis
    (12) statement -> . if_statement semis
    (13) statement -> . while_statement semis
    (14) statement -> . for_statement semis
    (15) statement -> . assignment semis
    (16) statement -> . return_statement semis
    (17) statement -> . print_statement semis
    (8) declaration -> . variable_declaration semis
    (9) declaration -> . function_declaration semis
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (49) if_statement -> . IF LPAREN expression RPAREN block
    (50) if_statement -> . IF LPAREN expression RPAREN block ELSE block
    (51) while_statement -> . WHILE LPAREN expression RPAREN block
    (52) for_statement -> . FOR LPAREN range_operator RPAREN block
    (21) assignment -> . ID EQUAL expression
    (20) return_statement -> . RETURN expression
    (62) print_statement -> . PRINT LPAREN expression RPAREN
    (55) variable_declaration -> . VAL ID COLONS type EQUAL expression
    (56) variable_declaration -> . VAR ID COLONS type EQUAL expression
    (57) variable_declaration -> . VAL ID EQUAL expression
    (58) variable_declaration -> . VAR ID EQUAL expression
    (22) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block
    (23) function_declaration -> . FUN ID LPAREN parameter_list_declaration RPAREN block
    (24) function_declaration -> . FUN ID LPAREN RPAREN COLONS type block
    (25) function_declaration -> . FUN ID LPAREN RPAREN block

    RBRACE          shift and go to state 117
    ID              shift and go to state 107
    IF              shift and go to state 108
    WHILE           shift and go to state 109
    FOR             shift and go to state 110
    RETURN          shift and go to state 111
    PRINT           shift and go to state 112
    VAL             shift and go to state 6
    VAR             shift and go to state 7
    FUN             shift and go to state 8

    statement                      shift and go to state 118
    declaration                    shift and go to state 99
    function_calling               shift and go to state 100
    if_statement                   shift and go to state 101
    while_statement                shift and go to state 102
    for_statement                  shift and go to state 103
    assignment                     shift and go to state 104
    return_statement               shift and go to state 105
    print_statement                shift and go to state 106
    variable_declaration           shift and go to state 4
    function_declaration           shift and go to state 5

state 98

    (4) statement_list -> statement .

    RBRACE          reduce using rule 4 (statement_list -> statement .)
    ID              reduce using rule 4 (statement_list -> statement .)
    IF              reduce using rule 4 (statement_list -> statement .)
    WHILE           reduce using rule 4 (statement_list -> statement .)
    FOR             reduce using rule 4 (statement_list -> statement .)
    RETURN          reduce using rule 4 (statement_list -> statement .)
    PRINT           reduce using rule 4 (statement_list -> statement .)
    VAL             reduce using rule 4 (statement_list -> statement .)
    VAR             reduce using rule 4 (statement_list -> statement .)
    FUN             reduce using rule 4 (statement_list -> statement .)


state 99

    (10) statement -> declaration .

    RBRACE          reduce using rule 10 (statement -> declaration .)
    ID              reduce using rule 10 (statement -> declaration .)
    IF              reduce using rule 10 (statement -> declaration .)
    WHILE           reduce using rule 10 (statement -> declaration .)
    FOR             reduce using rule 10 (statement -> declaration .)
    RETURN          reduce using rule 10 (statement -> declaration .)
    PRINT           reduce using rule 10 (statement -> declaration .)
    VAL             reduce using rule 10 (statement -> declaration .)
    VAR             reduce using rule 10 (statement -> declaration .)
    FUN             reduce using rule 10 (statement -> declaration .)


state 100

    (11) statement -> function_calling . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 119
    empty                          shift and go to state 12

state 101

    (12) statement -> if_statement . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 120
    empty                          shift and go to state 12

state 102

    (13) statement -> while_statement . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 121
    empty                          shift and go to state 12

state 103

    (14) statement -> for_statement . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 122
    empty                          shift and go to state 12

state 104

    (15) statement -> assignment . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 123
    empty                          shift and go to state 12

state 105

    (16) statement -> return_statement . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 124
    empty                          shift and go to state 12

state 106

    (17) statement -> print_statement . semis
    (71) semis -> . SEMICOLON
    (72) semis -> . empty
    (1) empty -> .

    SEMICOLON       shift and go to state 11
    RBRACE          reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    VAL             reduce using rule 1 (empty -> .)
    VAR             reduce using rule 1 (empty -> .)
    FUN             reduce using rule 1 (empty -> .)

    semis                          shift and go to state 125
    empty                          shift and go to state 12

state 107

    (26) function_calling -> ID . LPAREN parameter_list_calling RPAREN
    (27) function_calling -> ID . LPAREN RPAREN
    (21) assignment -> ID . EQUAL expression

    LPAREN          shift and go to state 47
    EQUAL           shift and go to state 126


state 108

    (49) if_statement -> IF . LPAREN expression RPAREN block
    (50) if_statement -> IF . LPAREN expression RPAREN block ELSE block

    LPAREN          shift and go to state 127


state 109

    (51) while_statement -> WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 128


state 110

    (52) for_statement -> FOR . LPAREN range_operator RPAREN block

    LPAREN          shift and go to state 129


state 111

    (20) return_statement -> RETURN . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 130
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 112

    (62) print_statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 131


state 113

    (26) function_calling -> ID LPAREN parameter_list_calling RPAREN .

    PLUS            reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    MINUS           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    TIMES           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    DIVIDE          reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    LOGICAL_AND     reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    LOGICAL_OR      reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    LOGICAL_EQUAL   reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    GREATER_THAN    reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    LESS_THAN       reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    NOT_EQUAL       reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    LESS_THAN_EQUAL reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    SEMICOLON       reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    VAL             reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    VAR             reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    FUN             reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    $end            reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    RBRACE          reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    ID              reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    IF              reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    WHILE           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    FOR             reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    RETURN          reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    PRINT           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    RPAREN          reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    COMMA           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    RANGE           reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)
    STEP            reduce using rule 26 (function_calling -> ID LPAREN parameter_list_calling RPAREN .)


state 114

    (29) parameter_list_calling -> parameter_list_calling COMMA . parameter_calling
    (47) parameter_calling -> . term
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    parameter_calling              shift and go to state 132
    term                           shift and go to state 75
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 115

    (22) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 133

state 116

    (24) function_declaration -> FUN ID LPAREN RPAREN COLONS type block .

    SEMICOLON       reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    VAL             reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    VAR             reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    FUN             reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    $end            reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    RBRACE          reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    ID              reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    IF              reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    WHILE           reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    FOR             reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    RETURN          reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)
    PRINT           reduce using rule 24 (function_declaration -> FUN ID LPAREN RPAREN COLONS type block .)


state 117

    (19) block -> LBRACE statement_list RBRACE .

    SEMICOLON       reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    VAL             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    FUN             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 19 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 19 (block -> LBRACE statement_list RBRACE .)


state 118

    (5) statement_list -> statement_list statement .

    RBRACE          reduce using rule 5 (statement_list -> statement_list statement .)
    ID              reduce using rule 5 (statement_list -> statement_list statement .)
    IF              reduce using rule 5 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 5 (statement_list -> statement_list statement .)
    FOR             reduce using rule 5 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 5 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 5 (statement_list -> statement_list statement .)
    VAL             reduce using rule 5 (statement_list -> statement_list statement .)
    VAR             reduce using rule 5 (statement_list -> statement_list statement .)
    FUN             reduce using rule 5 (statement_list -> statement_list statement .)


state 119

    (11) statement -> function_calling semis .

    RBRACE          reduce using rule 11 (statement -> function_calling semis .)
    ID              reduce using rule 11 (statement -> function_calling semis .)
    IF              reduce using rule 11 (statement -> function_calling semis .)
    WHILE           reduce using rule 11 (statement -> function_calling semis .)
    FOR             reduce using rule 11 (statement -> function_calling semis .)
    RETURN          reduce using rule 11 (statement -> function_calling semis .)
    PRINT           reduce using rule 11 (statement -> function_calling semis .)
    VAL             reduce using rule 11 (statement -> function_calling semis .)
    VAR             reduce using rule 11 (statement -> function_calling semis .)
    FUN             reduce using rule 11 (statement -> function_calling semis .)


state 120

    (12) statement -> if_statement semis .

    RBRACE          reduce using rule 12 (statement -> if_statement semis .)
    ID              reduce using rule 12 (statement -> if_statement semis .)
    IF              reduce using rule 12 (statement -> if_statement semis .)
    WHILE           reduce using rule 12 (statement -> if_statement semis .)
    FOR             reduce using rule 12 (statement -> if_statement semis .)
    RETURN          reduce using rule 12 (statement -> if_statement semis .)
    PRINT           reduce using rule 12 (statement -> if_statement semis .)
    VAL             reduce using rule 12 (statement -> if_statement semis .)
    VAR             reduce using rule 12 (statement -> if_statement semis .)
    FUN             reduce using rule 12 (statement -> if_statement semis .)


state 121

    (13) statement -> while_statement semis .

    RBRACE          reduce using rule 13 (statement -> while_statement semis .)
    ID              reduce using rule 13 (statement -> while_statement semis .)
    IF              reduce using rule 13 (statement -> while_statement semis .)
    WHILE           reduce using rule 13 (statement -> while_statement semis .)
    FOR             reduce using rule 13 (statement -> while_statement semis .)
    RETURN          reduce using rule 13 (statement -> while_statement semis .)
    PRINT           reduce using rule 13 (statement -> while_statement semis .)
    VAL             reduce using rule 13 (statement -> while_statement semis .)
    VAR             reduce using rule 13 (statement -> while_statement semis .)
    FUN             reduce using rule 13 (statement -> while_statement semis .)


state 122

    (14) statement -> for_statement semis .

    RBRACE          reduce using rule 14 (statement -> for_statement semis .)
    ID              reduce using rule 14 (statement -> for_statement semis .)
    IF              reduce using rule 14 (statement -> for_statement semis .)
    WHILE           reduce using rule 14 (statement -> for_statement semis .)
    FOR             reduce using rule 14 (statement -> for_statement semis .)
    RETURN          reduce using rule 14 (statement -> for_statement semis .)
    PRINT           reduce using rule 14 (statement -> for_statement semis .)
    VAL             reduce using rule 14 (statement -> for_statement semis .)
    VAR             reduce using rule 14 (statement -> for_statement semis .)
    FUN             reduce using rule 14 (statement -> for_statement semis .)


state 123

    (15) statement -> assignment semis .

    RBRACE          reduce using rule 15 (statement -> assignment semis .)
    ID              reduce using rule 15 (statement -> assignment semis .)
    IF              reduce using rule 15 (statement -> assignment semis .)
    WHILE           reduce using rule 15 (statement -> assignment semis .)
    FOR             reduce using rule 15 (statement -> assignment semis .)
    RETURN          reduce using rule 15 (statement -> assignment semis .)
    PRINT           reduce using rule 15 (statement -> assignment semis .)
    VAL             reduce using rule 15 (statement -> assignment semis .)
    VAR             reduce using rule 15 (statement -> assignment semis .)
    FUN             reduce using rule 15 (statement -> assignment semis .)


state 124

    (16) statement -> return_statement semis .

    RBRACE          reduce using rule 16 (statement -> return_statement semis .)
    ID              reduce using rule 16 (statement -> return_statement semis .)
    IF              reduce using rule 16 (statement -> return_statement semis .)
    WHILE           reduce using rule 16 (statement -> return_statement semis .)
    FOR             reduce using rule 16 (statement -> return_statement semis .)
    RETURN          reduce using rule 16 (statement -> return_statement semis .)
    PRINT           reduce using rule 16 (statement -> return_statement semis .)
    VAL             reduce using rule 16 (statement -> return_statement semis .)
    VAR             reduce using rule 16 (statement -> return_statement semis .)
    FUN             reduce using rule 16 (statement -> return_statement semis .)


state 125

    (17) statement -> print_statement semis .

    RBRACE          reduce using rule 17 (statement -> print_statement semis .)
    ID              reduce using rule 17 (statement -> print_statement semis .)
    IF              reduce using rule 17 (statement -> print_statement semis .)
    WHILE           reduce using rule 17 (statement -> print_statement semis .)
    FOR             reduce using rule 17 (statement -> print_statement semis .)
    RETURN          reduce using rule 17 (statement -> print_statement semis .)
    PRINT           reduce using rule 17 (statement -> print_statement semis .)
    VAL             reduce using rule 17 (statement -> print_statement semis .)
    VAR             reduce using rule 17 (statement -> print_statement semis .)
    FUN             reduce using rule 17 (statement -> print_statement semis .)


state 126

    (21) assignment -> ID EQUAL . expression
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 134
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 127

    (49) if_statement -> IF LPAREN . expression RPAREN block
    (50) if_statement -> IF LPAREN . expression RPAREN block ELSE block
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 135
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 128

    (51) while_statement -> WHILE LPAREN . expression RPAREN block
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 136
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 129

    (52) for_statement -> FOR LPAREN . range_operator RPAREN block
    (53) range_operator -> . ID IN term RANGE term
    (54) range_operator -> . ID IN term RANGE term STEP term

    ID              shift and go to state 138

    range_operator                 shift and go to state 137

state 130

    (20) return_statement -> RETURN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 20 (return_statement -> RETURN expression .)
    RBRACE          reduce using rule 20 (return_statement -> RETURN expression .)
    ID              reduce using rule 20 (return_statement -> RETURN expression .)
    IF              reduce using rule 20 (return_statement -> RETURN expression .)
    WHILE           reduce using rule 20 (return_statement -> RETURN expression .)
    FOR             reduce using rule 20 (return_statement -> RETURN expression .)
    RETURN          reduce using rule 20 (return_statement -> RETURN expression .)
    PRINT           reduce using rule 20 (return_statement -> RETURN expression .)
    VAL             reduce using rule 20 (return_statement -> RETURN expression .)
    VAR             reduce using rule 20 (return_statement -> RETURN expression .)
    FUN             reduce using rule 20 (return_statement -> RETURN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 131

    (62) print_statement -> PRINT LPAREN . expression RPAREN
    (2) expression -> . MINUS expression
    (32) expression -> . term
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIVIDE expression
    (37) expression -> . expression LOGICAL_AND expression
    (38) expression -> . expression LOGICAL_OR expression
    (39) expression -> . expression LOGICAL_EQUAL expression
    (40) expression -> . LOGICAL_NOT expression
    (41) expression -> . expression GREATER_THAN expression
    (42) expression -> . expression LESS_THAN expression
    (43) expression -> . expression NOT_EQUAL expression
    (44) expression -> . expression GREATER_THAN_EQUAL expression
    (45) expression -> . expression LESS_THAN_EQUAL expression
    (46) expression -> . LPAREN expression RPAREN
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    MINUS           shift and go to state 28
    LOGICAL_NOT     shift and go to state 30
    LPAREN          shift and go to state 31
    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    expression                     shift and go to state 139
    term                           shift and go to state 29
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 132

    (29) parameter_list_calling -> parameter_list_calling COMMA parameter_calling .

    RPAREN          reduce using rule 29 (parameter_list_calling -> parameter_list_calling COMMA parameter_calling .)
    COMMA           reduce using rule 29 (parameter_list_calling -> parameter_list_calling COMMA parameter_calling .)


state 133

    (22) function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .

    SEMICOLON       reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    VAL             reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    VAR             reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    FUN             reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    $end            reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    RBRACE          reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    ID              reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    IF              reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    WHILE           reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    FOR             reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    RETURN          reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)
    PRINT           reduce using rule 22 (function_declaration -> FUN ID LPAREN parameter_list_declaration RPAREN COLONS type block .)


state 134

    (21) assignment -> ID EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    SEMICOLON       reduce using rule 21 (assignment -> ID EQUAL expression .)
    RBRACE          reduce using rule 21 (assignment -> ID EQUAL expression .)
    ID              reduce using rule 21 (assignment -> ID EQUAL expression .)
    IF              reduce using rule 21 (assignment -> ID EQUAL expression .)
    WHILE           reduce using rule 21 (assignment -> ID EQUAL expression .)
    FOR             reduce using rule 21 (assignment -> ID EQUAL expression .)
    RETURN          reduce using rule 21 (assignment -> ID EQUAL expression .)
    PRINT           reduce using rule 21 (assignment -> ID EQUAL expression .)
    VAL             reduce using rule 21 (assignment -> ID EQUAL expression .)
    VAR             reduce using rule 21 (assignment -> ID EQUAL expression .)
    FUN             reduce using rule 21 (assignment -> ID EQUAL expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 135

    (49) if_statement -> IF LPAREN expression . RPAREN block
    (50) if_statement -> IF LPAREN expression . RPAREN block ELSE block
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    RPAREN          shift and go to state 140
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 136

    (51) while_statement -> WHILE LPAREN expression . RPAREN block
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 137

    (52) for_statement -> FOR LPAREN range_operator . RPAREN block

    RPAREN          shift and go to state 142


state 138

    (53) range_operator -> ID . IN term RANGE term
    (54) range_operator -> ID . IN term RANGE term STEP term

    IN              shift and go to state 143


state 139

    (62) print_statement -> PRINT LPAREN expression . RPAREN
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIVIDE expression
    (37) expression -> expression . LOGICAL_AND expression
    (38) expression -> expression . LOGICAL_OR expression
    (39) expression -> expression . LOGICAL_EQUAL expression
    (41) expression -> expression . GREATER_THAN expression
    (42) expression -> expression . LESS_THAN expression
    (43) expression -> expression . NOT_EQUAL expression
    (44) expression -> expression . GREATER_THAN_EQUAL expression
    (45) expression -> expression . LESS_THAN_EQUAL expression

    RPAREN          shift and go to state 144
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    LOGICAL_AND     shift and go to state 52
    LOGICAL_OR      shift and go to state 53
    LOGICAL_EQUAL   shift and go to state 54
    GREATER_THAN    shift and go to state 55
    LESS_THAN       shift and go to state 56
    NOT_EQUAL       shift and go to state 57
    GREATER_THAN_EQUAL shift and go to state 58
    LESS_THAN_EQUAL shift and go to state 59


state 140

    (49) if_statement -> IF LPAREN expression RPAREN . block
    (50) if_statement -> IF LPAREN expression RPAREN . block ELSE block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 145

state 141

    (51) while_statement -> WHILE LPAREN expression RPAREN . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 146

state 142

    (52) for_statement -> FOR LPAREN range_operator RPAREN . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 147

state 143

    (53) range_operator -> ID IN . term RANGE term
    (54) range_operator -> ID IN . term RANGE term STEP term
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    term                           shift and go to state 148
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 144

    (62) print_statement -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    RBRACE          reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    ID              reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    IF              reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    WHILE           reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    FOR             reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    RETURN          reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    PRINT           reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAL             reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    VAR             reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)
    FUN             reduce using rule 62 (print_statement -> PRINT LPAREN expression RPAREN .)


state 145

    (49) if_statement -> IF LPAREN expression RPAREN block .
    (50) if_statement -> IF LPAREN expression RPAREN block . ELSE block

    SEMICOLON       reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    ID              reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    IF              reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    WHILE           reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    FOR             reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    RETURN          reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    PRINT           reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    VAL             reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    VAR             reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    FUN             reduce using rule 49 (if_statement -> IF LPAREN expression RPAREN block .)
    ELSE            shift and go to state 149


state 146

    (51) while_statement -> WHILE LPAREN expression RPAREN block .

    SEMICOLON       reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    ID              reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    IF              reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    WHILE           reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FOR             reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    RETURN          reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    PRINT           reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    VAL             reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    VAR             reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FUN             reduce using rule 51 (while_statement -> WHILE LPAREN expression RPAREN block .)


state 147

    (52) for_statement -> FOR LPAREN range_operator RPAREN block .

    SEMICOLON       reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    RBRACE          reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    ID              reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    IF              reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    WHILE           reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    FOR             reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    RETURN          reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    PRINT           reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    VAL             reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    VAR             reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)
    FUN             reduce using rule 52 (for_statement -> FOR LPAREN range_operator RPAREN block .)


state 148

    (53) range_operator -> ID IN term . RANGE term
    (54) range_operator -> ID IN term . RANGE term STEP term

    RANGE           shift and go to state 150


state 149

    (50) if_statement -> IF LPAREN expression RPAREN block ELSE . block
    (18) block -> . LBRACE RBRACE
    (19) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 151

state 150

    (53) range_operator -> ID IN term RANGE . term
    (54) range_operator -> ID IN term RANGE . term STEP term
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    term                           shift and go to state 152
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 151

    (50) if_statement -> IF LPAREN expression RPAREN block ELSE block .

    SEMICOLON       reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    RBRACE          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    ID              reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    IF              reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    WHILE           reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    FOR             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    RETURN          reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    PRINT           reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    VAL             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    VAR             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)
    FUN             reduce using rule 50 (if_statement -> IF LPAREN expression RPAREN block ELSE block .)


state 152

    (53) range_operator -> ID IN term RANGE term .
    (54) range_operator -> ID IN term RANGE term . STEP term

    RPAREN          reduce using rule 53 (range_operator -> ID IN term RANGE term .)
    STEP            shift and go to state 153


state 153

    (54) range_operator -> ID IN term RANGE term STEP . term
    (63) term -> . Literal
    (64) term -> . ID
    (65) term -> . function_calling
    (66) term -> . readline
    (67) Literal -> . INTEGER_LITERAL
    (68) Literal -> . TRUE
    (69) Literal -> . FALSE
    (70) Literal -> . STRING_LITERAL
    (26) function_calling -> . ID LPAREN parameter_list_calling RPAREN
    (27) function_calling -> . ID LPAREN RPAREN
    (73) readline -> . READLINE LPAREN RPAREN

    ID              shift and go to state 26
    INTEGER_LITERAL shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37
    STRING_LITERAL  shift and go to state 38
    READLINE        shift and go to state 39

    term                           shift and go to state 154
    Literal                        shift and go to state 32
    function_calling               shift and go to state 33
    readline                       shift and go to state 34

state 154

    (54) range_operator -> ID IN term RANGE term STEP term .

    RPAREN          reduce using rule 54 (range_operator -> ID IN term RANGE term STEP term .)

